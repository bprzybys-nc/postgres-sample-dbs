# helm-charts/lego/values.yaml
# Kubernetes deployment configuration for lego database
# Scenario: LOGIC_HEAVY | Criticality: CRITICAL

# Global configuration
global:
  database:
    name: "lego"
    scenario: "logic_heavy"
    criticality: "critical"

  # Image registry settings
  imageRegistry: "registry.company.com"
  storageClass: "premium-ssd"

# PostgreSQL configuration
postgresql:
  enabled: true

  # Database connection settings
  auth:
    postgresPassword: ""  # Will be set via secret
    username: "dbuser"
    password: ""  # Will be set via secret
    database: "lego"

  # Primary server configuration
  primary:
    name: "primary"

    # Resource allocation based on criticality
    resources:
      requests:
        cpu: '2000m'
        memory: '4Gi'
      limits:
        cpu: '4000m'
        memory: '8Gi'

    # Storage configuration  
    persistence:
      enabled: true
      size: 100Gi
      storageClass: premium-ssd
      accessModes:
        - ReadWriteOnce

    # PostgreSQL configuration parameters
    postgresqlConfiguration:
      max_connections: 200
      shared_buffers: 1GB
      effective_cache_size: 3GB
      work_mem: 32MB

      # Logging configuration for monitoring
      log_statement: "all"  # Log all statements for decommissioning analysis
      log_connections: "on"
      log_disconnections: "on"
      log_duration: "on"
      log_min_duration_statement: "1000"  # Log queries longer than 1 second

    # Pod security context
    podSecurityContext:
      fsGroup: 1001
      runAsUser: 1001
      runAsNonRoot: true

    # Container security context  
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true

  # High availability configuration (for critical databases)
  readReplicas:
    replicaCount: 2

    resources:
      requests:
        cpu: '1000m'
        memory: '2Gi'
      limits:
        cpu: '2000m'
        memory: '4Gi'

# Service configuration
service:
  type: ClusterIP
  port: 5432

  # Service annotations for monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    datadog.com/check: "postgres"

    # Decommissioning metadata
    decommissioning.company.com/scenario: "logic_heavy"
    decommissioning.company.com/criticality: "critical"
    decommissioning.company.com/monitor: "enabled"

# Network policies
networkPolicy:
  enabled: true

  # Ingress rules based on scenario type
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: "application"
      - namespaceSelector:
          matchLabels:
            name: "monitoring"
      ports:
      - protocol: TCP
        port: 5432

    # Additional access for logic-heavy scenarios
    - from:
      - namespaceSelector:
          matchLabels:
            name: 'analytics'
      - namespaceSelector:
          matchLabels:
            name: 'business-intelligence'

# Monitoring and observability
monitoring:
  enabled: true

  # PostgreSQL exporter for Prometheus
  postgresqlExporter:
    enabled: true
    image:
      registry: quay.io
      repository: prometheuscommunity/postgres-exporter
      tag: "v0.12.0"

    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"

    # Custom metrics for decommissioning
    customMetrics:
      - metric_name: "pg_database_connection_idle_time"
        help: "Time since last database connection"
        query: |
          SELECT 
            datname as database,
            EXTRACT(EPOCH FROM (now() - pg_stat_get_db_stat_reset_time(oid))) as idle_seconds
          FROM pg_database 
          WHERE datname = 'lego'

      - metric_name: "pg_database_last_query_time"  
        help: "Timestamp of last query executed"
        query: |
          SELECT 
            datname as database,
            EXTRACT(EPOCH FROM max(query_start)) as last_query_epoch
          FROM pg_stat_activity 
          WHERE datname = 'lego'
          GROUP BY datname

  # Service monitor for Prometheus
  serviceMonitor:
    enabled: true
    namespace: "monitoring"
    labels:
      app: "lego-postgres"
      scenario: "logic_heavy"
    interval: "30s"
    path: "/metrics"

# Backup configuration
backup:
  enabled: true

  schedule: '0 2 * * *'  # Daily at 2 AM
  retention: '30d'

  storage:
    type: 'azure-blob'
    container: 'database-backups'

# Pod disruption budget (for critical databases)
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Resource quotas and limits
resourceQuota:
  enabled: true
  hard:
    limits.cpu: '8000m'
    limits.memory: '16Gi'
    persistentvolumeclaims: '3'

# Labels and annotations
labels:
  app: "lego"
  database: "lego"
  scenario: "logic_heavy"
  criticality: "critical"
  chart: "postgresql"
  heritage: "Helm"

annotations:
  # Decommissioning workflow metadata
  decommissioning.company.com/database: "lego"
  decommissioning.company.com/scenario: "LOGIC_HEAVY"
  decommissioning.company.com/criticality: "CRITICAL"
  decommissioning.company.com/description: "Product analytics and revenue forecasting system"
  decommissioning.company.com/created: "{{ .Release.Time }}"

  # Monitoring annotations
  prometheus.io/scrape: "true"
  datadog.com/check: "postgres"

  # Configuration management
  helm.sh/hook-weight: "0"

# Environment-specific overrides
environments:
  development:
    postgresql:
      primary:
        resources:
          requests:
            cpu: "250m"
            memory: "1Gi"
          limits:
            cpu: "500m" 
            memory: "2Gi"
        persistence:
          size: "10Gi"

  staging:
    postgresql:
      primary:
        resources:
          requests:
            cpu: '1000m'
            memory: '2Gi'
          limits:
            cpu: '2000m'
            memory: '4Gi'
        persistence:
          size: 50Gi

  production:
    # Use default values defined above
    postgresql:
      primary:
        nodeSelector:
          database-tier: 'critical'
        tolerations:
        - key: "database"
          operator: "Equal"
          value: "critical"
          effect: "NoSchedule"

# Health checks and probes
healthChecks:
  livenessProbe:
    enabled: true
    exec:
      command:
        - /bin/bash
        - -ec
        - 'PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "dbuser" -d "lego" -h 127.0.0.1 -c "SELECT 1"'
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    exec:
      command:
        - /bin/bash
        - -ec
        - 'PGPASSWORD=$POSTGRES_PASSWORD psql -w -U "dbuser" -d "lego" -h 127.0.0.1 -c "SELECT 1"'
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
